---
openapi: 3.0.0
servers:
  - url: 'https://api.nexmo.com'
info:
  version: 2.0.0
  title: 'Conversation Service'
  description: 'The Nexmo Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.  '
  contact:
    name: Nexmo DevRel
    email: devrel@nexmo.com
    url: 'https://developer.nexmo.com/'
  x-label: Beta
paths:
  "/beta2/users":
    post:
      operationId: create-user
      tags:
        - user
      summary: Create User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_user"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"

    get:
      operationId: get-users
      tags:
        - user
      summary: List Users
      parameters:
        - $ref: "#/components/parameters/page_size"
        - $ref: "#/components/parameters/order"
        - $ref: "#/components/parameters/cursor"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  page_size:
                    type: integer
                    example: 10
                    description: The number of results returned on this page
                  _embedded:
                    type: object
                    x-nexmo-developer-collection-description-shown: true
                    properties:
                      users:
                        type: array
                        description: List of users matching the provided filter
                        items:
                          $ref: "#/components/schemas/user"
                  _links:
                    type: object
                    properties:
                      first:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/users?order=desc&page_size=10"
                      self:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/users?order=desc&page_size=10&cursor=88b395c167da4d94e929705cbd63b82973771e7d390d274a58e301386d5762600a3ffd799bfb3fc5190c5a0d124cdd0fc72fe6e450506b18e4e2edf9fe84c7a0"
                      next:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/users?order=desc&page_size=10&cursor=88b395c167da4d94e929705cbd63b829a650e69a39197bfd4c949f4243f60dc4babb696afa404d2f44e7775e32b967f2a1a0bb8fb259c0999ba5a4e501eaab55"
                      prev:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/users?order=desc&page_size=10&cursor=069626a3de11d2ec900dff5042197bd75f1ce41dafc3f2b2481eb9151086e59aae9dba3e3a8858dc355232d499c310fbfbec43923ff657c0de8d49ffed9f7edb"

  "/beta2/users/{user_id}":
    get:
      operationId: get-user
      tags:
        - user
      summary: Get Single User
      parameters:
        - $ref: "#/components/parameters/user_id_parameter"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
    put:
      operationId: update-user
      tags:
        - user
      summary: Update User
      parameters:
        - $ref: "#/components/parameters/user_id_parameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_user"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"

    delete:
      operationId: delete-user
      tags:
        - user
      summary: Delete User
      parameters:
        - $ref: "#/components/parameters/user_id_parameter"
      responses:
        '204':
          description: "No Content"




  "/beta2/conversations":
    post:
      operationId: create-conversation
      tags:
        - conversation
      summary: Create Conversation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_conversation"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversation"

    get:
      operationId: get-conversations
      tags:
        - conversation
      summary: List Conversations
      parameters:
        - $ref: "#/components/parameters/page_size"
        - $ref: "#/components/parameters/order"
        - $ref: "#/components/parameters/cursor"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  page_size:
                    type: integer
                    example: 10
                    description: The number of results returned on this page
                  _embedded:
                    type: object
                    x-nexmo-developer-collection-description-shown: true
                    properties:
                      conversations:
                        type: array
                        description: List of conversations matching the provided filter
                        items:
                          $ref: "#/components/schemas/conversation"
                  _links:
                    type: object
                    properties:
                      first:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/conversations?order=desc&page_size=10"
                      self:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/conversations?order=desc&page_size=10&cursor=88b395c167da4d94e929705cbd63b82973771e7d390d274a58e301386d5762600a3ffd799bfb3fc5190c5a0d124cdd0fc72fe6e450506b18e4e2edf9fe84c7a0"
                      next:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/conversations?order=desc&page_size=10&cursor=88b395c167da4d94e929705cbd63b829a650e69a39197bfd4c949f4243f60dc4babb696afa404d2f44e7775e32b967f2a1a0bb8fb259c0999ba5a4e501eaab55"
                      prev:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/conversations?order=desc&page_size=10&cursor=069626a3de11d2ec900dff5042197bd75f1ce41dafc3f2b2481eb9151086e59aae9dba3e3a8858dc355232d499c310fbfbec43923ff657c0de8d49ffed9f7edb"

  "/beta2/conversations/{conversation_id}":
    get:
      operationId: get-conversation
      tags:
        - conversation
      summary: Get Single Conversation
      parameters:
        - $ref: "#/components/parameters/conversation_id_parameter"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversation"
    put:
      operationId: update-conversation
      tags:
        - conversation
      summary: Update Conversation
      parameters:
        - $ref: "#/components/parameters/conversation_id_parameter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_conversation"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conversation"

    delete:
      operationId: delete-conversation
      tags:
        - conversation
      summary: Delete Conversation
      parameters:
        - $ref: "#/components/parameters/conversation_id_parameter"
      responses:
        '204':
          description: "No Content"


  "/beta2/members":
    post:
      operationId: create-member
      tags:
        - member
      summary: Create Member
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/create_member_with_id"
                - $ref: "#/components/schemas/create_member_with_user_name"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/member"

    get:
      operationId: get-members
      tags:
        - member
      summary: List Members
      parameters:
        - $ref: "#/components/parameters/page_size"
        - $ref: "#/components/parameters/order"
        - $ref: "#/components/parameters/cursor"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  page_size:
                    type: integer
                    example: 10
                    description: The number of results returned on this page
                  _embedded:
                    type: object
                    x-nexmo-developer-collection-description-shown: true
                    properties:
                      members:
                        type: array
                        description: List of members matching the provided filter
                        items:
                          $ref: "#/components/schemas/member"
                  _links:
                    type: object
                    properties:
                      first:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/members?order=desc&page_size=10"
                      self:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/members?order=desc&page_size=10&cursor=88b395c167da4d94e929705cbd63b82973771e7d390d274a58e301386d5762600a3ffd799bfb3fc5190c5a0d124cdd0fc72fe6e450506b18e4e2edf9fe84c7a0"
                      next:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/members?order=desc&page_size=10&cursor=88b395c167da4d94e929705cbd63b829a650e69a39197bfd4c949f4243f60dc4babb696afa404d2f44e7775e32b967f2a1a0bb8fb259c0999ba5a4e501eaab55"
                      prev:
                        type: object
                        properties:
                          href:
                            type: string
                            example: "https://api.nexmo.com/beta2/members?order=desc&page_size=10&cursor=069626a3de11d2ec900dff5042197bd75f1ce41dafc3f2b2481eb9151086e59aae9dba3e3a8858dc355232d499c310fbfbec43923ff657c0de8d49ffed9f7edb"

  "/beta2/conversations/{conversation_id}/members/{member_id}":
    get:
      operationId: get-member
      tags:
        - member
      summary: Get Single Member
      parameters:
        - $ref: "#/components/parameters/conversation_id_parameter"
        - $ref: "#/components/parameters/member_id_parameter"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
    put:
      description: Used to join a member to a conversation from the server
      operationId: update-member
      tags:
        - member
      summary: Update Member
      parameters:
        - $ref: "#/components/parameters/conversation_id_parameter"
        - $ref: "#/components/parameters/member_id_parameter"
      requestBody:
        content:
          application/json:
            schema:
                properties:
                  state:
                    type: string
                    description: The state that the member is in for this conversation
                    example: join
                    enum:
                      - join
                  channel:
                    type: object
                    properties:
                      type:
                        type: string
                        example: app
                        enum:
                          - app
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/member"

    delete:
      operationId: delete-member
      tags:
        - member
      summary: Delete Member
      parameters:
        - $ref: "#/components/parameters/conversation_id_parameter"
        - $ref: "#/components/parameters/member_id_parameter"
      responses:
        '204':
          description: "No Content"

  "/beta2/conversations/{conversation_id}/events":
    post:
      operationId: create-event
      tags:
        - event
      summary: Create Event
      parameters:
        - $ref: "#/components/parameters/conversation_id_parameter"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/create_text_event"
                - $ref: "#/components/schemas/create_custom_event"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"

    get:
      operationId: get-events
      tags:
        - event
      summary: List Events
      parameters:
        - $ref: "#/components/parameters/conversation_id_parameter"
        - $ref: "#/components/parameters/start_id_parameter"
        - $ref: "#/components/parameters/end_id_parameter"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/all_events"

  "/beta2/conversations/{conversation_id}/events/{event_id}":
    get:
      operationId: get-event
      tags:
        - event
      summary: Get Single Event
      parameters:
        - $ref: "#/components/parameters/conversation_id_parameter"
        - $ref: "#/components/parameters/event_id_parameter"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/all_events"

    delete:
      operationId: delete-event
      tags:
        - event
      summary: Delete Event
      parameters:
        - $ref: "#/components/parameters/conversation_id_parameter"
        - $ref: "#/components/parameters/event_id_parameter"
      responses:
        '204':
          description: "No Content"





components:
  parameters:
    start_id_parameter:
      name: start_id
      in: query
      schema:
        type: string
      example: 13
      required: false
      description: The ID to start returning events at

    end_id_parameter:
      name: end_id
      in: query
      schema:
        type: string
      example: 19
      required: false
      description: The ID to end returning events at

    event_id_parameter:
      name: event_id
      in: path
      schema:
        type: integer
      example: 9
      required: true
      description: The ID of the event

    member_id_parameter:
      name: member_id
      in: path
      schema:
        type: string
      example: MEM-e46d9542-752a-4786-8f12-25a2e623a793
      required: true
      description: The ID of the member

    user_id_parameter:
      name: user_id
      in: path
      schema:
        type: string
      example: USR-e46d9542-752a-4786-8f12-25a2e623a793
      required: true
      description: The ID of the user

    conversation_id_parameter:
      name: conversation_id
      in: path
      schema:
        type: string
      example: CON-afe887d8-d587-4280-9aae-dfa4c9227d5e
      required: true
      description: The ID of the conversation

    page_size:
      name: page_size
      in: query
      description: The number of results returned per page
      schema:
        type: integer
        default: 10
      required: false
    order:
      name: order
      in: query
      description: Show the most (`desc`) / least (`asc`) recently created entries first
      schema:
        type: string
        default: asc
        enum:
          - asc
          - desc
      required: false
    cursor:
      name: cursor
      in: query
      description: |
        The cursor to start returning results from.

        You are not expected to provide this manually, but to follow the url provided in `_links.next.href` in the response which contains a `cursor` value
      schema:
        type: string
      required: false

  schemas:

    create_event:
      type: object
      description: Text
      properties:
        to:
          type: string
          example: MEM-afe887d8-d587-4280-9aae-dfa4c9227d5e
        from:
          type: string
          example: MEM-e46d9542-752a-4786-8f12-25a2e623a793
          description: The member ID of the recipient

    create_text_event:
      allOf:
        - type: object
          x-tab-id: text-event
          description: Text
          properties:
            type:
              type: string
              example: text
              enum:
                - text
            body:
              type: object
              x-nexmo-developer-collection-description-shown: true
              properties:
                text:
                  type: string
                  example: "This is my message"
                  description: The string to send as a `text` message
        - $ref: "#/components/schemas/create_event"

    create_custom_event:
      allOf:
        - type: object
          x-tab-id: custom-event
          description: Custom Event
          properties:
            type:
              type: string
              example: custom:stripe_payment
              description: The event type. Must start with `custom:`, may only contain `-` or alphanumeric characters and can have up to 100 characters as your custom name
              enum:
                - ^custom:[\w\-:]{1,100}
            body:
              type: object
              x-nexmo-developer-collection-description-shown: true
              description: Any custom data that you'd like to attach to the conversation. Maximum 4kb
              properties: {}
              example: {}
        - $ref: "#/components/schemas/create_event"


    all_events:
      oneOf:
        - $ref: "#/components/schemas/text_event"
        - $ref: "#/components/schemas/custom_event"

    text_event:
      allOf:
        - description: Text
          x-tab-id: text-event
          properties:
            body:
              type: object
              description: The body of the `text` event
              properties:
                text:
                  type: string
                  description: The text sent in this event
                  example: Hello World
            type:
              type: string
              description: The event type (`text`)
              example: text
        - $ref: "#/components/schemas/event"

    custom_event:
      allOf: 
        - description: Custom
          x-tab-id: custom-event
          properties:
            body:
              type: object
              description: The body of your `custom` event
              example: {"my": "Custom Data"}
            type:
              type: string
              description: The event type (`custom:<YOUR_IDENTIFIER>`)
              example: "custom:my_event"
        - $ref: "#/components/schemas/event"

    event:
      type: object
      properties:
        id:
          type: integer
          example: 9
          description: The ID of the event
        from:
          type: string
          example: MEM-afe887d8-d587-4280-9aae-dfa4c9227d5e
          description: The member ID of the sender
        to:
          type: string
          example: MEM-e46d9542-752a-4786-8f12-25a2e623a793
          description: The member ID of the recipient
        timestamp:
          type: string
          example: 2019-09-12T19:49:21.823Z
          description: The time that the event happened
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  example: "https://api.nexmo.com/beta/conversations/CON-92a44c64-7e4e-485f-a0c4-1f2adfc44625/events/9"

    create_member_with_id:
      allOf:
        - description: "With ID"
          properties:
            user_id:
              $ref: "#/components/schemas/user_id"
          required:
            - user_id
        - $ref: "#/components/schemas/create_member"

    create_member_with_user_name:
      allOf:
        - description: "With User Name"
          properties:
            user_name:
              $ref: "#/components/schemas/user_name"
          required:
            - user_name
        - $ref: "#/components/schemas/create_member"

    create_member:
      type: object
      properties:
        conversation_id:
          $ref: "#/components/schemas/conversation_id"
        channel:
          type: object
          properties:
            type:
              type: string
              description: The channel to join the conversation on
              example: app
              enum:
                - app
    member:
      type: object
      properties:
        id:
          type: string
          example: MEM-afe887d8-d587-4280-9aae-dfa4c9227d5e
          description: Member ID
        name:
          type: string
          example: ashley
          description: The name of the User
        display_name:
          type: string
          example: Ashley Arthur
          description: The display name of the User
        user_id:
          type: string
          example: USR-2c52f0ec-7a48-4b52-9d47-df47482b2b7e
          description: The ID of the User
        conversation_id:
          type: string
          example: CON-92a44c64-7e4e-485f-a0c4-1f2adfc44625
          description: The ID of the Conversation that the member belongs to
        timestamp:
          type: object
          properties:
            invited:
              type: string
              example: '2019-09-03T18:40:24.324Z'
              description: The time that an invitation was sent
            joined:
              type: string
              example: '2019-09-12T16:27:07.450Z'
              description: The time that the conversation was joined
        channel:
          type: object
          properties:
            type:
              type: string
              example: app
              description: The channel that the member joins with
              enum:
                - app
        state:
          type: string
          description: The state that the member is in for this conversation
          example: JOINED
          enum:
            - INVITED
            - JOINED
        media:
          type: object
          description: The current media state for the member
          properties:
            audio_settings:
              description: The current audio state for the member
              type: object
              properties:
                enabled:
                  type: boolean
                  example: false
                  description: Is audio enabled?
                earmuffed:
                  type: boolean
                  example: false
                  description: Can the member hear other participants?
                muted:
                  type: boolean
                  example: false
                  description: Can the member speak to other participants?
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  example: https://api.nexmo.com/beta2/conversations/CON-92a44c64-7e4e-485f-a0c4-1f2adfc44625/members/MEM-e784d5d1-dff2-424a-9de7-bc34f1901177

    create_conversation:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/conversation_name"
        display_name:
          $ref: "#/components/schemas/conversation_display_name"
        image_url:
          $ref: "#/components/schemas/conversation_image_url"
        properties:
          type: object
          properties:
            custom_data:
              type: object
              x-nexmo-developer-collection-description-shown: true
              description: Any custom data that you'd like to attach to the conversation. Maximum 4kb
              properties: {}
              example: {}

    conversation:
      type: object
      properties:
        id:
          type: string
          example: CON-afe887d8-d587-4280-9aae-dfa4c9227d5e
          description: The ID of the conversation
        name:
          $ref: "#/components/schemas/conversation_name"
        display_name:
          $ref: "#/components/schemas/conversation_display_name"
        image_url:
          $ref: "#/components/schemas/conversation_image_url"
        properties:
          type: object
          properties:
            custom_data:
              type: object
              x-nexmo-developer-collection-description-shown: true
              description: Any custom data that is attached to the conversation
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  example: "https://api.nexmo.com/beta/conversations/CON-c4724477-72ac-438e-9fc0-1d3e2ff8728c"

    conversation_id:
      type: string
      example: CON-c4724477-72ac-438e-9fc0-1d3e2ff8728c
      description: Automatically generated conversation ID
    conversation_name:
      type: string
      example: my-conversation
      description: Your internal conversation name. Must be unique
    conversation_display_name:
      type: string
      example: Conversation with Ashley
      description: The public facing name of the conversation
    conversation_image_url:
      type: string
      example: https://example.com/my-image.png
      description: An image URL that you associate with the conversation

    create_user:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/user_name"
        display_name:
          $ref: "#/components/schemas/user_display_name"
        properties:
          type: object
          properties:
            custom_data:
              type: object
              x-nexmo-developer-collection-description-shown: true
              description: Any custom data that you'd like to attach to the user. This will be returned in all user objects. Maximum 4kb
              properties: {}
    user:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/user_id"
        name:
          $ref: "#/components/schemas/user_name"
        display_name:
          $ref: "#/components/schemas/user_display_name"
        properties:
          type: object
          properties:
            custom_data:
              type: object
              x-nexmo-developer-collection-description-shown: true
              description: Any custom data that is attached to the user
        _links:
          $ref: "#/components/schemas/user_links"
    user_id:
      type: string
      description: The ID of the user
      example: USR-e46d9542-752a-4786-8f12-25a2e623a793
    user_name:
      type: string
      description: The name of the user
      example: ashley
    user_display_name:
      type: string
      description: The name of the user
      example: Ashley Aardvark
    user_links:
      type: object
      properties:
        self:
          type: object
          properties:
            href:
              type: string
              example: https://api.nexmo.com/beta2/users/USR-e46d9542-752a-4786-8f12-25a2e623a793
tags:
  - name: Conversation
    description: A conversation is a shared core component that Nexmo APIs rely on. Conversations happen over multiple mediums and and can have associated Users through Memberships.
  - name: User
    description: 'The concept of a user exists in Nexmo APIs, you can associate one with a user in your own application if you choose. A user can have multiple memberships to conversations and can communicate with other users through various different mediums.'
  - name: Member
    description: Memberships connect users with conversations. Each membership has one conversation and one user however a user can have many memberships to conversations just as conversations can have many members.
  - name: Event
    description: 'Events are actions that occur within a conversation. Examples of this includes: Text events from members, or invite events from users'
